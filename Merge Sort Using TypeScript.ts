//Merge Sort Sorting Algorithm Implementation.....

//Intializing the array's that are to be sorted using Merge Sort....
let arr1 : number[] = [5 , 6 , 7 , 9 , 8 , 1 , 2 , 3 , 4 , 0];

let arr2 : number[] = [2 , 6 , 5 , 3 , 1 , 0 , 4];

//Merge Sort method....
let mergeSort = (array : number[]) : number[] =>{
        //Check whether there is only a single element in an array...
        if(array.length === 1)
        return array;

        //Find the middleElement of an array....
        let middleElement : number = Math.floor(array.length / 2);
        //Find the left array.....
        let leftArray : number[] = array.slice(0 , middleElement );
        //Find the right array....
        let rightArray : number[] = array.slice(middleElement );
        
        //Pass the left and right array in another function called merge for comparison....
        return merge(mergeSort(leftArray), mergeSort (rightArray)); 
}

//Merge method for comaprsion of left and right arrays.....
let merge = (leftArray : number[] , rightArray : number[]) : number[] =>{
    //Declaring the result array....
    let result : number[] = [];
    //Declaring the leftIndex integer for storing the leftIndex value of Left array...
    let leftIndex : number= 0;
    //Declaring the rightIndex integer for storing the rightIndex value of Right array....
    let rightIndex : number = 0;

    //Run a loop over the left and right array checking and comparing their indexes values....
    while(leftIndex < leftArray.length  && rightIndex < rightArray.length)
    {
        //Check whether the leftarray element is less than the right array element...
        if(leftArray [leftIndex] < rightArray [rightIndex])
        {
            //Push the elements in the array....
            result.push(leftArray[leftIndex]);
            //Increment the leftIndex value....
            leftIndex ++;
        }
        else
        {
            //Push the elements in the array....
            result.push(rightArray[rightIndex]);
            //Increment the leftIndex value....
            rightIndex ++;
        }
    }
    //Concat the left and right arrays and return them as the output in the sort of sorted array.....
    return result.concat(leftArray.slice(leftIndex)) . concat (rightArray.slice(rightIndex));
}

console.log(mergeSort(arr1));
console.log(mergeSort(arr2));

